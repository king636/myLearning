underscore
第三方库，用来实现map(),filter()这些操作．
回顾Array的map()和filter()方法：
'use strict';
var a1 = [1, 4, 9, 16];
var a2 = a1.map(Math.sqrt); // [1, 2, 3, 4]
var a3 = a2.filter((x) => { return x % 2 === 0; }); // [2, 4]

Array有map()和filter()方法，Object没有，低版本的浏览器(IE6~8)也没有这些方法．
两种方法让Object也有map()等方法：
1. 把这些方法添加到Array.prototype中，然后给Object.prototype也加上mapObject()等类似的方法。
2. 第三方开源库，即这里的underscore

underscore则提供了一套完善的函数式编程的接口，让我们更方便地在JavaScript中实现函数式编程。
jQuery在加载时，会把自身绑定到唯一的全局变量$上，underscore与其类似，会把自身绑定到唯一的全局变量_上.

用underscore实现map()操作：
'use strict'
_.map([1,2,3],(x)=>x*x);//[1,4,9]

还可以作用于Object:
'use strict'
_.map({a:1,b:2,c:3},(v,k)=>k+'='+v);//['a=1','b=2','c=3']

Collections

underscore为集合类对象提供了一致的接口。集合类是指Array和Object，暂不支持Map和Set。

map/filter
当作用于Object时，传入的函数为function (value, key)，第一个参数接收value，第二个参数接收key：
var obj = {
    name: 'bob',
    school: 'No.1 middle school',
    address: 'xueyuan road'
};
var upper = _.map(obj, function (value, key) {
    return value;
});
alert(JSON.stringify(upper)); //["bob","No.1 middle school","xueyuan road"]

_.map返回的是Array.
_.mapObject返回的是Object,上例中修改为：
var upper = _.mapObject(obj, function (value, key) {
    return value;
});
alert(JSON.stringify(upper));//{"name":"bob","school":"No.1 middle school","address":"xueyuan road"}

every/some
当集合的所有元素都满足条件时，_.every()函数返回true，当集合的至少一个元素满足条件时，_.some()函数返回true：
'use strict';
// 所有元素都大于0？
_.every([1, 4, 7, -3, -9], (x) => x > 0); // false
// 至少一个元素大于0？
_.some([1, 4, 7, -3, -9], (x) => x > 0); // true

当集合是Object时：
'use strict';
var obj = {
    name: 'bob',
    school: 'No.1 middle school',
    address: 'xueyuan road'
};
// 判断key和value是否全部是小写：

max / min
这两个函数直接返回集合中最大和最小的数：
'use strict';
var arr = [3, 5, 7, 9];
_.max(arr); // 9
_.min(arr); // 3

// 空集合会返回-Infinity和Infinity，所以要先判断集合不为空：
_.max([])
-Infinity
_.min([])
Infinity

注意，如果集合是Object，max()和min()只作用于value，忽略掉key：
'use strict';
_.max({ a: 1, b: 2, c: 3 }); // 3

groupBy

groupBy()把集合的元素按照key归类，key由传入的函数返回：
'use strict';

var scores = [20, 81, 75, 40, 91, 59, 77, 66, 72, 88, 99];
var groups = _.groupBy(scores, function (x) {
    if (x < 60) {
        return 'C';
    } else if (x < 80) {
        return 'B';
    } else {
        return 'A';
    }
});
// 结果:
// {
//   A: [81, 91, 88, 99],
//   B: [75, 77, 66, 72],
//   C: [20, 40, 59]
// }

可见groupBy()用来分组是非常方便的。

shuffle / sample

shuffle()用洗牌算法随机打乱一个集合：
'use strict';
// 注意每次结果都不一样：
_.shuffle([1, 2, 3, 4, 5, 6]); // [3, 5, 4, 6, 2, 1]

sample()则是随机选择一个或多个元素：
'use strict';
// 注意每次结果都不一样：
// 随机选1个：
_.sample([1, 2, 3, 4, 5, 6]); // 2
// 随机选3个：
_.sample([1, 2, 3, 4, 5, 6], 3); // [6, 1, 4]

更多完整的函数请参考underscore的文档：http://underscorejs.org/#collections

Arrays
underscore为Array提供了许多工具类方法，可以更方便快捷地操作Array:
first / last

顾名思义，这两个函数分别取第一个和最后一个元素：

'use strict';
var arr = [2, 4, 6, 8];
_.first(arr); // 2
_.last(arr); // 8

flatten

flatten()接收一个Array，无论这个Array里面嵌套了多少个Array，flatten()最后都把它们变成一个一维数组：

'use strict';

_.flatten([1, [2], [3, [[4], [5]]]]); // [1, 2, 3, 4, 5]

zip / unzip
zip()把两个或多个数组的所有元素按索引对齐，然后按索引合并成新数组。
'use strict';

var names = ['Adam', 'Lisa', 'Bart'];
var scores = [85, 92, 59];
_.zip(names, scores);
// [['Adam', 85], ['Lisa', 92], ['Bart', 59]]
unzip()则是反过来：
'use strict';
var namesAndScores = [['Adam', 85], ['Lisa', 92], ['Bart', 59]];
_.unzip(namesAndScores);
// [['Adam', 'Lisa', 'Bart'], [85, 92, 59]]

object
合并成Object:
'use strict';

var names = ['Adam', 'Lisa', 'Bart'];
var scores = [85, 92, 59];
_.object(names, scores);
// {Adam: 85, Lisa: 92, Bart: 59}

range
range()让你快速生成一个序列，不再需要用for循环实现了：
'use strict';

// 从0开始小于10:
_.range(10); // [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]

// 从1开始小于11：
_.range(1, 11); // [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

// 从0开始小于30，步长5:
_.range(0, 30, 5); // [0, 5, 10, 15, 20, 25]

// 从0开始大于-10，步长-1:
_.range(0, -10, -1); // [0, -1, -2, -3, -4, -5, -6, -7, -8, -9]

Functions
提供了大量JavaScript本身没有的高阶函数。

bind
当用一个变量fn指向一个对象的方法时，直接调用fn()是不行的，因为丢失了this对象的引用:
'use strict';

var s = ' Hello  ';
s.trim();
// 输出'Hello'

var fn = s.trim;
fn();
// Uncaught TypeError: String.prototype.trim called on null or undefined

正确做法：
'use strict';

var s = ' Hello  ';
var fn = s.trim;
// 调用call并传入s对象作为this:
fn.call(s)
// 输出Hello

用bind:
'use strict';

var s = ' Hello  ';
var fn = _.bind(s.trim, s);
fn();
// 输出Hello

partial
partial()就是为一个函数创建偏函数。
偏函数就是固定原函数的某些参数，比如，固定住Math.pow(x,y)的第一个参数：
'use strict';

var pow2N = _.partial(Math.pow, 2);
pow2N(3); // 8
pow2N(5); // 32
pow2N(10); // 1024

如果要固定住第二个参数，用_作占位符：
'use strict';

var cube = _.partial(Math.pow, _, 3);
cube(3); // 27
cube(5); // 125
cube(10); // 1000

memoize
把函数调用结果缓存下来，以便后续调用时直接获得结果．
比如计算阶乘函数，每次调用都会计算一遍，开销很大：
'use strict';

function factorial(n) {
    console.log('start calculate ' + n + '!...');
    var s = 1, i = n;
    while (i > 1) {
        s = s * i;
        i --;
    }
    console.log(n + '! = ' + s);
    return s;
}

factorial(10); // 3628800
// 注意控制台输出:
// start calculate 10!...
// 10! = 3628800

使用memoize:
'use strict';

var factorial = _.memoize(function(n) {
    console.log('start calculate ' + n + '!...');
    var s = 1, i = n;
    while (i > 1) {
        s = s * i;
        i --;
    }
    console.log(n + '! = ' + s);
    return s;
});

// 第一次调用:
factorial(10); // 3628800
// 注意控制台输出:
// start calculate 10!...
// 10! = 3628800

// 第二次调用:
factorial(10); // 3628800
// 控制台没有输出

以上改写，当你计算factorial(9)的时候，仍然会重新计算。进行改进，使用递归调用：
'use strict';

var factorial = _.memoize(function(n) {
    console.log('start calculate ' + n + '!...');
    if (n < 2) {
        return 1;
    }
    return n * factorial(n - 1);
});

factorial(10); // 3628800
// 输出结果说明factorial(1)~factorial(10)都已经缓存了:
// start calculate 10!...
// start calculate 9!...
// start calculate 8!...
// start calculate 7!...
// start calculate 6!...
// start calculate 5!...
// start calculate 4!...
// start calculate 3!...
// start calculate 2!...
// start calculate 1!...

factorial(9); // 362880
// console无输出

once
once()保证某个函数执行且仅执行一次。如果你有一个方法叫register()，用户在页面上点两个按钮的任何一个都可以执行的话，就可以用once()保证函数仅调用一次，无论用户点击多少次：
var register = _.once(function () {
    alert('Register ok!');
});

// 测试效果:
register();
register();
register();

delay
delay()可以让一个函数延迟执行，效果和setTimeout()是一样的，但是代码明显简单了：
// 2秒后调用alert():
_.delay(alert, 2000);

如果要延迟调用的函数有参数，把参数也传进去：
var log = _.bind(console.log, console);
_.delay(log, 2000, 'Hello,', 'world!');
// 2秒后打印'Hello, world!'

Objects
underscore也提供了大量针对Object的函数。

keys / allKeys
keys()可以非常方便地返回一个object自身所有的key，但不包含从原型链继承下来的：
function Student(name, age) {
    this.name = name;
    this.age = age;
}

var xiaoming = new Student('小明', 20);
_.keys(xiaoming); // ['name', 'age']

allKeys()除了object自身的key，还包含从原型链继承下来的：
function Student(name, age) {
    this.name = name;
    this.age = age;
}
Student.prototype.school = 'No.1 Middle School';
var xiaoming = new Student('小明', 20);
_.allKeys(xiaoming); // ['name', 'age', 'school']

values
和keys()类似，values()返回object自身但不包含原型链继承的所有值：
var obj = {
    name: '小明',
    age: 20
};

_.values(obj); // ['小明', 20]

注意：没有allValues()

mapObject
mapObject()就是针对object的map版本：
var obj = { a: 1, b: 2, c: 3 };
// 注意传入的函数签名，value在前，key在后:
_.mapObject(obj, (v, k) => 100 + v); // { a: 101, b: 102, c: 103 }

invert
把object的每个key-value来个交换，key变成value，value变成key：
var obj = {
    Adam: 90,
    Lisa: 85,
    Bart: 59
};
_.invert(obj); // { '59': 'Bart', '85': 'Lisa', '90': 'Adam' }

extend / extendOwn
extend()把多个object的key-value合并到第一个object并返回：
注意：如果有相同的key，后面的object的value将覆盖前面的object的value。
var a = {name: 'Bob', age: 20};
_.extend(a, {age: 15}, {age: 88, city: 'Beijing'}); // {name: 'Bob', age: 88, city: 'Beijing'}
// 变量a的内容也改变了：
a; // {name: 'Bob', age: 88, city: 'Beijing'}

extendOwn()和extend()类似，但获取属性时忽略从原型链继承下来的属性.

clone
把原有对象的所有属性都复制到新的对象中：
var source = {
    name: '小明',
    age: 20,
    skills: ['JavaScript', 'CSS', 'HTML']
};
var copied = _.clone(source);
alert(JSON.stringify(copied, null, '  '));
//显示
{
 "name":"小明",
 "age":20,
 "skills":[
   "JavaScript",
   "CSS",
   "HTML"
 ]
}

注意，clone()是“浅复制”。所谓“浅复制”就是说，两个对象相同的key所引用的value其实是同一对象：
source.skills === copied.skills; // true
也就是说，修改source.skills会影响copied.skills。

isEqual
isEqual()对两个object进行深度比较，如果内容完全相同，则返回true：
var o1 = { name: 'Bob', skills: { Java: 90, JavaScript: 99 }};
var o2 = { name: 'Bob', skills: { JavaScript: 99, Java: 90 }};

o1 === o2; // false
_.isEqual(o1, o2); // true

isEqual()其实对Array也可以比较：
var o1 = ['Bob', { skills: ['Java', 'JavaScript'] }];
var o2 = ['Bob', { skills: ['Java', 'JavaScript'] }];

o1 === o2; // false
_.isEqual(o1, o2); // true

Chaining
回顾jQuery的链式调用：
$('a').attr('target', '_blank')
      .append(' <i class="uk-icon-external-link"></i>')
      .click(function () {});

underscore提供了把对象包装成能进行链式调用的方法，就是chain()函数：
_.chain([1, 4, 9, 16, 25])
 .map(Math.sqrt)
 .filter(x => x % 2 === 1)
 .value();
// [1, 3, 5]

因为每一步返回的都是包装对象，所以最后一步的结果需要调用value()获得最终结果。
